run的核心执行过程总结：
1、  加载WASm/WAT文件，构建IR:Module,这是WASM的内存形式
2、  从Cache中拿到编译过的Obj文件，这是实现JIT方式运行的关键;
    Obj文件中包含了对当前WASM程序所有自定义函数的本地化可运行的编译，但是还需要链接之后才能运行;
    若Cache中没有，那么就执行Compile操作，构建Obj，并缓存
3、  IR::Module + ObjFile = Runtime::Module
4、  构建内部实例，这是及其核心的步骤，主要是封装供自定义WASM调用的接口（及WASi）;
    构建过程和生成普通WASM实例大同小异
5、  链接，链接的过程就是解析自己的导入项，从导入的实例中，找到定义的Runtime的对象，然后返回其指针保存
6、  生成实例，此过程主要作用是生成Runtime定义的各个对象：Function、Global、Memory、Table等
    除Function外，其他各项都是直接生成自定义的对象、初始化，然后和导入项，一起放到vector中即可
    Function，则需要生成可执行的二进制码，主要过程就是通过链接，将导入项解析ObjFile，将ObjFile中的Symbol的地址全部解析，完成链接
    最后配置导出项，以供其他WASM导入
    对于内部的WASM，他只有函数导入项，即用于实现WASi接口的本地函数，在内部函数中，将其视为导入项，因为Function导入项必须是Obj，刚好本地函数编译之后就是Obj了
    然后需要我们生成每个本地函数的trunks函数，以WASM自定义函数的方式，生成其Function对象，以供导出，生成Function对象时需要提供函数symbol的指针（如果调用了函数），
    此指针对于普通的WASM函数，就是Function.code，也就是函数对应的Obj的地址，这一步是在生成被调用函数的Function对象时确定的，如果是调用本地函数（仅存在与Trunks函数中），
    那么函数地址就是本地函数的指针
7、  执行，执行其实不复杂，就是利用llvm生成一个trunks，调用入口函数就行了
    trunks的参数和返回值根据函数签名准备好，trunks的函数的地址就是入口函数的Function.code




run：
	parseCommandLineAndEnvironment()
	····根据命令行的参数给State的字段赋值
	····检查开启的特性是否在本CPU上支持
	····初始化Cache(主要是建立MDB数据库，具体执行WASM的时候再添加数据，cache的内容是同compile一样的objcode)
	loadTextOrBinaryModule()
	····解析wasm/wat文件，生成Runtime::Module(Runtime::Module = IR:Module + objcode)
	initABIEnvironment()
	····确定使用的ABI类型（一下均以WASI为例）
	····如果是wasi，且指定了rootMountPath，则需要配置sandboxFS
	····创建Process
		createProcess()
		····对compartment执行了setUserData，但是此函数是没有任何操作的在这里
		····调用instantiateModule创建内部的WASM的Instance，此Instance是WASI实现的主要接口，instantiateModule传递一个拥有4个元素的列表，每个元素都是一个Intrinsics::Module module，这是一个静态变量，里面已经初始化预定义的内部函数
			Instance* wasi_snapshot_preview1 = Intrinsics::instantiateModule()
			····将自定义的函数写到了新建的IRModule的types,functions.imports和import中，函数的地址指针写入functionImportBindings
			····将local_get和call、end指令编码到codeStream中，变成字节数组
			····将自定义的函数再写入functions.def和export中，其实函数的字节码为codeStream
			····编译irModule生成Runtime::Module
			····调用instantiateModuleInternal生成实例
				instantiateModuleInternal(compartment,module,functionImports,{},{},{},{},debugName)
				····四个空{}是其余四个导入项，在这里都没有，functionImports也仅仅包括自定义的本地函数，其值为函数指针
		····将内部的Intance写入解析器，这样在执行链接时找到内部的WASM模块，就可以从内部的Intance中导入
			process->resolver.moduleNameToInstanceMap.set("wasi_unstable", wasi_snapshot_preview1);
		····配置三个fd(stdin/stdin/stderr)到fdMap
		····如果配置了sandboxFS，那么将sandboxFS的根目录添加到fdMap，保证所有的打开文件都是从sandboxFS中的
	linkModule(IrModule,ProcessResolver)
	····通过ProcessResolver将IrModule需要导入的对象写入到ImportBindings(Object *)类型的resolvedImports中,Object *可以和Function *等相互转化
	Runtime::tantiateModule(compartment, module, std::move(linkResult.resolvedImports), filename)
	····分析resolvedImports，构造5中导入的Vector
		instantiateModuleInternal(compartment,module,functionImports,tableImports,memoryImports,globalImports,exceptionTypeImports,debugName)
	WASI::setProcessMemory(*wasiProcess, memory)
	····对于wasi接口的wasm，一定存在一个名为memory的导出项，需要将其赋值给ProcessMemory
	execute(irModule, instance);